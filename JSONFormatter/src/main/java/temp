package com.example.JSONFormatter.controller;

import com.example.JSONFormatter.service.JsonFormatter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.IOException;

@RestController
public class JsonValidatorController {

    private final JsonFormatter jsonFormatter;

    @Autowired
    public JsonValidatorController(JsonFormatter jsonFormatter) {
        this.jsonFormatter = jsonFormatter;
    }

    @PostMapping("/format")
    public ResponseEntity<String> formatJSON(@RequestBody String json) {
        try {
            String fixedJson = jsonFormatter.formatJSON(json);
            return ResponseEntity.ok(fixedJson);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Failed to fix JSON syntax errors.");
        }
    }
}


----------------------------

package com.example.JSONFormatter.service;

import org.json.JSONObject;
import org.springframework.stereotype.Component;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

@Component
public class JsonFormatter {

    private static final String JSONLINT_API_URL = "https://jsonlint.com/api";

    public String formatJSON(String json) throws IOException {
        URL url = new URL(JSONLINT_API_URL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setDoOutput(true);
        connection.setRequestMethod("POST");

        try (OutputStream outputStream = connection.getOutputStream()) {
            outputStream.write(json.getBytes());
        }

        StringBuilder responseBuilder = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                responseBuilder.append(line);
            }
        }

        String response = responseBuilder.toString();
        JSONObject jsonResponse = new JSONObject(response);
        String fixedJson = jsonResponse.getJSONObject("fix").getString("text");
        return fixedJson;
    }
}



//    private String correctJsonSyntax(String inputJson) {
//        // Implement your logic here to correct the JSON syntax
//        // You can use regular expressions or other techniques to correct common errors
//        // For simplicity, let's assume we can only correct mismatched quotes
//
//        // Replace single quotes with double quotes
//        String correctedJson = inputJson.replace("'", "\"");
//        // Replace trailing commas in objects and arrays
//        correctedJson = correctedJson.replaceAll(",(\\s*[}\\]])", "$1");
//
//        // You can add more rules to correct other syntax errors if needed
//
//        try {
//            // Try parsing the corrected JSON to ensure it is now valid
//            objectMapper.readTree(correctedJson);
//            return correctedJson;
//        } catch (Exception e) {
//            return null; // Correction failed
//        }
//    }
